// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KalapaSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AudioToolbox
import CommonCrypto
import CoreML
import CoreNFC
import CoreVideo
import CryptoKit
import CryptoTokenKit
import DeveloperToolsSupport
import Foundation
@_exported import KalapaSDK
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class Constant {
  public enum MediaType {
    case FRONT
    case BACK
    case SELFIE
    case LIVENESS
    public static func == (a: KalapaSDK.Constant.MediaType, b: KalapaSDK.Constant.MediaType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum KalapaAnalyticsEventType {
    case FLOW
    case SCREEN
    case ACTION
    case ERROR
    public static func == (a: KalapaSDK.Constant.KalapaAnalyticsEventType, b: KalapaSDK.Constant.KalapaAnalyticsEventType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum KalapaAnalyticsPropertyKey {
    case SCREEN_NAME
    case SCREEN_MODE
    case DOCUMENT_TYPE
    case COUNTRY_CODE
    case IS_AUTOCAPTURE
    public static func == (a: KalapaSDK.Constant.KalapaAnalyticsPropertyKey, b: KalapaSDK.Constant.KalapaAnalyticsPropertyKey) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum KalapaDocumentType {
    case NATIONAL_ID
    case PASSPORT
    case VEHICLE_REGISTRATION
    case PROOF_OF_ADDRESS
    public static func == (a: KalapaSDK.Constant.KalapaDocumentType, b: KalapaSDK.Constant.KalapaDocumentType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class KLPDecisionDetail : ObjectiveC.NSObject {
  final public let code: Swift.String?
  final public let decisionDetailDescription: Swift.String?
  final public let decisionDetailViDescription: Swift.String?
  final public let isPass: Swift.Int?
  final public let alias: Swift.String?
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc deinit
}
extension UIKit.UIImage {
  convenience public init?(klpNamed: Swift.String)
}
extension Swift.Dictionary {
  public func klp_getStringForKey(key: Swift.String) -> Swift.String
  @inlinable internal mutating func klp_append(_ other: [Key : Value]) {
        return self.merge(other, uniquingKeysWith: { $1 }) // replacing current value
    }
  @inlinable internal func klp_appending(_ other: [Key : Value]) -> [Key : Value] {
        return self.merging(other, uniquingKeysWith: { $1 }) // replacing current value
    }
}
@_hasMissingDesignatedInitializers @objc public class KalapaResult : ObjectiveC.NSObject {
  @objc public var frontResult: KalapaSDK.KLPFrontResult?
  @objc public var backResult: KalapaSDK.KLPBackResult?
  @objc public var decision: Swift.String?
  @objc public var decision_detail: [KalapaSDK.KLPDecisionDetail]?
  @objc public var session: Swift.String?
  @objc public var nfcModel: KalapaSDK.KLPNfcModel?
  @objc public var rawJson: [Swift.String : Any]
  @objc public var mrzOfBackResult: Swift.String? {
    @objc get
  }
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc deinit
}
@objc public class KLPFrontResult : ObjectiveC.NSObject, Foundation.NSCoding {
  public var blurScore: Swift.Float?
  public var cardType: Swift.String?
  public var fields: KalapaSDK.Field?
  public var flashScore: Swift.Int?
  public var photocopyScore: Swift.Float?
  public var qrCode: KalapaSDK.QRCode?
  public var mrzData: KalapaSDK.MRZ?
  @objc public init(fromDictionary dictionary: [Swift.String : Any])
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc public class QRCode : ObjectiveC.NSObject {
  @objc public var data: KalapaSDK.QRCode.QRCodeData?
  @objc public var error: KalapaSDK.BaseError?
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc public init(fromDictionary dictionary: [Swift.String : Any])
  @_hasMissingDesignatedInitializers @objc public class QRCodeData : ObjectiveC.NSObject {
    @objc public func toDictionary() -> [Swift.String : Any]
    @objc deinit
  }
  @objc deinit
}
@objc public class BaseError : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  final public let code: Swift.Int?
  final public let message: Swift.String?
  @objc public init(fromDictionary dictionary: [Swift.String : Any])
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class MRZ : ObjectiveC.NSObject {
  @objc public var data: KalapaSDK.MRZ.MrzData?
  @objc public var error: KalapaSDK.BaseError?
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc public init(fromDictionary dictionary: [Swift.String : Any])
  @objc public class MrzData : ObjectiveC.NSObject {
    public var raw_mrz: Swift.String?
    @objc public func toDictionary() -> [Swift.String : Any]
    @objc public init(fromDictionary dictionary: [Swift.String : Any])
    @objc deinit
  }
  @objc deinit
}
@objc public class Field : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var birthday: Swift.String?
  @objc public var country: Swift.String?
  @objc public var doe: Swift.String?
  @objc public var doi: Swift.String?
  @objc public var ethnicity: Swift.String?
  @objc public var features: Swift.String?
  @objc public var gender: Swift.String?
  @objc public var home: Swift.String?
  @objc public var homeEntities: KalapaSDK.HomeEntity?
  @objc public var idNumber: Swift.String?
  @objc public var name: Swift.String?
  @objc public var national: Swift.String?
  @objc public var poi: Swift.String?
  @objc public var religion: Swift.String?
  @objc public var resident: Swift.String?
  @objc public var residentEntities: KalapaSDK.ResidentEntity?
  @objc public var type: Swift.String?
  @objc public init(fromDictionary dictionary: [Swift.String : Any])
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc public class ResidentEntity : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var district: Swift.String?
  @objc public var province: Swift.String?
  @objc public var unknown: Swift.String?
  @objc public var ward: Swift.String?
  @objc public init(fromDictionary dictionary: [Swift.String : Any])
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc public class HomeEntity : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public init(fromDictionary dictionary: [Swift.String : Any])
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension KalapaSDK.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension KalapaSDK.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension KalapaSDK.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class ReachabilityUtils {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class Kalapa : ObjectiveC.NSObject {
  @objc public static var shared: KalapaSDK.Kalapa
  final public func run(flowType: KalapaSDK.KLPFlowType = .ekyc, withConfig: KalapaSDK.KLPConfig, rawDataProcessor: any KalapaSDK.KLPRawDataProcessor)
  final public func run(flowType: KalapaSDK.KLPFlowType = .ekyc, withConfig: KalapaSDK.KLPConfig)
  @objc final public func run(flow: Swift.String, withConfig: KalapaSDK.KLPConfig)
  @objc final public func run(flow: Swift.String, withConfig: KalapaSDK.KLPConfig, rawDataProcessor: any KalapaSDK.KLPRawDataProcessor)
  @objc final public func run(withConfig: KalapaSDK.KLPConfig, from viewController: UIKit.UIViewController, animated flag: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @objc final public func restart()
  @objc final public func close(isCancel: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension KalapaSDK.Kalapa {
  @objc final public func getSDKVersion() -> Swift.String
  @objc final public func showResult(result: KalapaSDK.KalapaResult)
  @objc final public func showResultNfc(result: KalapaSDK.KalapaResult)
  final public func getFlowType() -> KalapaSDK.KLPFlowType
  @objc final public func klp_localize(key: Swift.String) -> Swift.String
  @objc final public func getConfig() -> KalapaSDK.KLPConfig
  @objc final public func setConfig(_ config: KalapaSDK.KLPConfig)
  @objc final public func syncLocalizeWithCompletion(_ completion: (() -> Swift.Void)? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  @objc final public func syncLocalize() async
  #endif
  final public func showLoading(fromVC: UIKit.UIViewController? = nil, text: Swift.String? = nil, colorAnimation: UIKit.UIColor? = nil, interaction: Swift.Bool = false)
  final public func hideLoading()
  final public func showAlert(alertType: KalapaSDK.KLPAlertVC.TypeOfAlert, title: Swift.String? = nil, message: Swift.String? = nil, cancelCompletion: (() -> Swift.Void)? = nil, okCompletion: (() -> Swift.Void)? = nil, animated: Swift.Bool = true, presentCompletion: (() -> Swift.Void)? = nil, fromVC: UIKit.UIViewController? = nil)
}
@_hasMissingDesignatedInitializers @objc public class KLPBackResult : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum KLPFaceLivenessVersion : Swift.Int, Swift.CaseIterable, Swift.RawRepresentable {
  case passive
  case semiActive
  case active
  public typealias RawValue = Swift.String
  public init?(rawValue: KalapaSDK.KLPFaceLivenessVersion.RawValue)
  public var rawValue: KalapaSDK.KLPFaceLivenessVersion.RawValue {
    get
  }
  public var note: Swift.String {
    get
  }
  public var desc: Swift.String {
    get
  }
  public var key: Swift.String {
    get
  }
  public typealias AllCases = [KalapaSDK.KLPFaceLivenessVersion]
  public static var allCases: [KalapaSDK.KLPFaceLivenessVersion] {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KLPAppearance : ObjectiveC.NSObject {
  @objc public static func Builder() -> KalapaSDK.KLPAppearance
  @discardableResult
  @objc final public func withLanguage(_ language: Swift.String = "vi") -> KalapaSDK.KLPAppearance
  @discardableResult
  @objc final public func withMainColor(_ mainColor: Swift.String = "3270EA") -> KalapaSDK.KLPAppearance
  @discardableResult
  @objc final public func withMainTextColor(_ mainTextColor: Swift.String = "000000") -> KalapaSDK.KLPAppearance
  @discardableResult
  @objc final public func withBtnTextColor(_ btnTextColor: Swift.String = "FFFFFF") -> KalapaSDK.KLPAppearance
  @discardableResult
  @objc final public func withBackgroundColor(_ backgroundColor: Swift.String = "FFFFFF") -> KalapaSDK.KLPAppearance
  @discardableResult
  @objc final public func withIsAnimatedButton(_ isAnimatedButton: Swift.Bool = true) -> KalapaSDK.KLPAppearance
  @discardableResult
  @objc final public func withCornerRadiusButton(_ cornerRadiusButton: CoreFoundation.CGFloat = 10) -> KalapaSDK.KLPAppearance
  @objc final public func build() -> KalapaSDK.KLPAppearance
  @objc deinit
}
public enum KLPFlowType : Swift.Equatable {
  case ekyc
  case nfc_ekyc(mrz: Swift.String?)
  case nfc_only(mrz: Swift.String?, faceData: Swift.String?)
  public var key: Swift.String {
    get
  }
  public var isNfcOnly: Swift.Bool {
    get
  }
  public var isNfceKYC: Swift.Bool {
    get
  }
  public static func == (lhs: KalapaSDK.KLPFlowType, rhs: KalapaSDK.KLPFlowType) -> Swift.Bool
}
@objc public enum KLPLogLevel : Swift.Int, Swift.CaseIterable {
  case debug = 1
  case info = 2
  case warning = 3
  case error = 4
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [KalapaSDK.KLPLogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [KalapaSDK.KLPLogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol KLPRawDataProcessor {
  @objc func processNFCData(jsonNfc: [Swift.String : Any], completion: @escaping (KalapaSDK.KLPConfig.Result) -> Swift.Void)
  @objc func processLivenessData(faceImageData: Foundation.NSData, faceImageBase64String: Swift.String, variant: Swift.String, completion: @escaping (KalapaSDK.KLPConfig.Result) -> Swift.Void)
  @objc func processCaptureData(isFront: Swift.Bool, idCardImageData: Foundation.NSData, idCardImageBase64String: Swift.String, completion: @escaping (KalapaSDK.KLPConfig.Result) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc final public class KLPConfig : ObjectiveC.NSObject {
  @objc final public var appearance: KalapaSDK.KLPAppearance {
    get
  }
  @discardableResult
  @objc public static func Builder(session: Swift.String) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withSession(_ session: Swift.String) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withBaseUrl(_ baseUrl: Swift.String) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withLivenessVersion(_ livenessVersion: KalapaSDK.KLPFaceLivenessVersion) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withMRZ(_ mrz: Swift.String?) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withFaceDataBase64(_ faceDataBase64: Swift.String?) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withAppearance(_ appearance: KalapaSDK.KLPAppearance) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withShowResultScreen(_ showResultScreen: Swift.Bool) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withIDStep(isFrontId: Swift.Bool = true, idDataHandler: @escaping KalapaSDK.KLPConfig.IDDataHandler) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withNFCStep(mrz: Swift.String? = nil, nfcDatahandler: @escaping KalapaSDK.KLPConfig.NFCDataHandler) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withFaceStep(livenessVersion: KalapaSDK.KLPFaceLivenessVersion = .passive, faceDataHandler: @escaping KalapaSDK.KLPConfig.FaceDataHandler) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withShowLoadingHandler(_ showLoadingHandler: ((_ fromVC: UIKit.UIViewController?) -> Swift.Void)? = nil) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withHideLoadingHandler(_ hideLoadingHandler: (() -> Swift.Void)? = nil) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withShowErrorAlertHandler(_ showErrorAlertHandler: KalapaSDK.KLPConfig.ShowErrorAlertHandler? = nil) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withResultHandler(_ resultHandler: ((_ result: KalapaSDK.KalapaResult?) -> Swift.Void)?) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withExpiredHandler(_ expiredHandler: KalapaSDK.KLPConfig.VoidHandler?) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withTimeoutScanNFCHandler(_ timeoutScanNFCHandler: KalapaSDK.KLPConfig.VoidHandler?) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withCancelSessionHandler(_ cancelSessionHandler: KalapaSDK.KLPConfig.VoidHandler?) -> KalapaSDK.KLPConfig
  @discardableResult
  @objc final public func withLogHandler(_ logHandler: KalapaSDK.KLPConfig.LogHandler?) -> KalapaSDK.KLPConfig
  @objc final public func build(completion: ((_ config: KalapaSDK.KLPConfig) -> Swift.Void)? = nil) throws
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  @objc final public func build() async throws -> KalapaSDK.KLPConfig
  #endif
  @objc override dynamic public init()
  @objc deinit
}
extension KalapaSDK.KLPConfig {
  public typealias IDDataHandler = (_ IDData: Foundation.NSData, _ IDBase64String: Swift.String, _ completion: @escaping (_ result: KalapaSDK.KLPConfig.Result) -> Swift.Void) -> Swift.Void
  public typealias NFCDataHandler = (_ jsonNfc: [Swift.String : Any], _ completion: @escaping (_ result: KalapaSDK.KLPConfig.Result) -> Swift.Void) -> Swift.Void
  public typealias FaceDataHandler = (_ faceData: Foundation.NSData, _ faceBase64String: Swift.String, _ variant: Swift.String, _ completion: @escaping (_ result: KalapaSDK.KLPConfig.Result) -> Swift.Void) -> Swift.Void
  public typealias LogHandler = (_ logLevel: KalapaSDK.KLPLogLevel, _ logAction: Swift.String, _ screenId: Swift.String, _ data: [Swift.String : Any], _ metadata: [Swift.String : Any]) -> Swift.Void
  public typealias VoidHandler = () -> Swift.Void
  public typealias ShowErrorAlertHandler = (Swift.String, UIKit.UIViewController) -> Swift.Void
  @objc public enum ErrorKind : Swift.Int, Foundation.LocalizedError {
    case missingSDKSession
    case missingBaseUrl
    case missingLanguage
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public static var _nsErrorDomain: Swift.String {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum ResultType : Swift.Int {
    case success
    case failure
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public class Result : ObjectiveC.NSObject {
    @objc public init(type: KalapaSDK.KLPConfig.ResultType, error: KalapaSDK.KalapaError? = nil, dataResponse: [Swift.String : Any]? = nil)
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @objc public class KLPNfcModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public var id_number: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nationality: Swift.String?
  @objc public var date_of_issuance: Swift.String?
  @objc public var father_name: Swift.String?
  @objc public var personal_identification: Swift.String?
  @objc public var date_of_expiry: Swift.String?
  @objc public var old_id_number: Swift.String?
  @objc public var nation: Swift.String?
  @objc public var religion: Swift.String?
  @objc public var address: Swift.String?
  @objc public var face_image: Swift.String?
  @objc public var hometown: Swift.String?
  @objc public var mother_name: Swift.String?
  @objc public var mrz: Swift.String?
  @objc public var date_of_birth: Swift.String?
  @objc public var spouse_name: Swift.String?
  @objc public var gender: Swift.String?
  @objc public var faceImageBase64: Swift.String? {
    @objc get
  }
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc public func toJSONString() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class KLPAlertVC : UIKit.UIViewController {
  public enum TypeOfAlert {
    case sessionTimeOut, error, close, other
    case upgrade
    public static func == (a: KalapaSDK.KLPAlertVC.TypeOfAlert, b: KalapaSDK.KLPAlertVC.TypeOfAlert) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public static func newVC(alertType: KalapaSDK.KLPAlertVC.TypeOfAlert, title: Swift.String? = nil, message: Swift.String? = nil) -> Self
  @_Concurrency.MainActor(unsafe) public var onConfirmAction: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onCancelAction: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class KalapaError : ObjectiveC.NSObject {
  public static let commonError: KalapaSDK.KalapaError
  public init(code: Swift.Int)
  convenience public init(code: Swift.Int, message: Swift.String)
  public init(code: Swift.Int, errorDescription: Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KalapaBaseWithoutNibView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setup()
  @objc deinit
}
extension KalapaSDK.Constant.MediaType : Swift.Equatable {}
extension KalapaSDK.Constant.MediaType : Swift.Hashable {}
extension KalapaSDK.Constant.KalapaAnalyticsEventType : Swift.Equatable {}
extension KalapaSDK.Constant.KalapaAnalyticsEventType : Swift.Hashable {}
extension KalapaSDK.Constant.KalapaAnalyticsPropertyKey : Swift.Equatable {}
extension KalapaSDK.Constant.KalapaAnalyticsPropertyKey : Swift.Hashable {}
extension KalapaSDK.Constant.KalapaDocumentType : Swift.Equatable {}
extension KalapaSDK.Constant.KalapaDocumentType : Swift.Hashable {}
extension KalapaSDK.KLPFaceLivenessVersion : Swift.Equatable {}
extension KalapaSDK.KLPFaceLivenessVersion : Swift.Hashable {}
extension KalapaSDK.KLPLogLevel : Swift.Equatable {}
extension KalapaSDK.KLPLogLevel : Swift.Hashable {}
extension KalapaSDK.KLPLogLevel : Swift.RawRepresentable {}
extension KalapaSDK.KLPConfig.ErrorKind : Swift.Equatable {}
extension KalapaSDK.KLPConfig.ErrorKind : Swift.Hashable {}
extension KalapaSDK.KLPConfig.ErrorKind : Swift.RawRepresentable {}
extension KalapaSDK.KLPConfig.ResultType : Swift.Equatable {}
extension KalapaSDK.KLPConfig.ResultType : Swift.Hashable {}
extension KalapaSDK.KLPConfig.ResultType : Swift.RawRepresentable {}
extension KalapaSDK.KLPAlertVC.TypeOfAlert : Swift.Equatable {}
extension KalapaSDK.KLPAlertVC.TypeOfAlert : Swift.Hashable {}
