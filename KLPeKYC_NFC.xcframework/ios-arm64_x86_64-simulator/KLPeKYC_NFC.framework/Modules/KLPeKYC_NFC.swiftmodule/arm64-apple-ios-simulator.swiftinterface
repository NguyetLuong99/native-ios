// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KLPeKYC_NFC
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AudioToolbox
import CommonCrypto
import CoreGraphics
import CoreNFC
import CoreVideo
import CryptoKit
import CryptoTokenKit
import DeveloperToolsSupport
import Foundation
@_exported import KLPeKYC_NFC
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class KalapaButton : UIKit.UIButton {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var isConfirmButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func updateNormalBgColor(_ color: UIKit.UIColor?)
  @_Concurrency.MainActor(unsafe) public func setUpButton(isConfirmButton: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KLPeKYC : ObjectiveC.NSObject {
  @objc public static let shared: KLPeKYC_NFC.KLPeKYC
  @objc final public func run(from viewController: UIKit.UIViewController, withConfiguration: KLPeKYC_NFC.KLPConfig, animated flag: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @objc final public func close(animated flag: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
extension KLPeKYC_NFC.KLPeKYC {
  @objc final public func setAccessToken(_ token: Swift.String)
  @objc final public func checkVersionLanguageAndUpdateIfNeed(completion: (() -> Swift.Void)? = nil)
  @objc final public func checkNFCReadingAvailable() -> Swift.Bool
  @objc final public func klp_localize(key: Swift.String) -> Swift.String
  @objc final public func showLoading(fromVC: UIKit.UIViewController? = nil, text: Swift.String? = nil, colorAnimation: UIKit.UIColor? = nil, interaction: Swift.Bool = false)
  @objc final public func hideLoading()
  @objc final public func showAlert(alertType: KLPeKYC_NFC.KLPAlertType, title: Swift.String? = nil, message: Swift.String? = nil, titleAtt: Foundation.NSMutableAttributedString? = nil, messageAtt: Foundation.NSMutableAttributedString? = nil, cancelCompletion: (() -> Swift.Void)? = nil, okCompletion: (() -> Swift.Void)? = nil, animated: Swift.Bool = true, presentCompletion: (() -> Swift.Void)? = nil, fromVC: UIKit.UIViewController? = nil)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KLPConfig : ObjectiveC.NSObject {
  @discardableResult
  @objc public static func builder() -> KLPeKYC_NFC.KLPConfig
  @discardableResult
  @objc final public func withSDKToken(_ sdkToken: Swift.String) -> KLPeKYC_NFC.KLPConfig
  @discardableResult
  @objc final public func withBaseUrl(_ baseUrl: Swift.String) -> KLPeKYC_NFC.KLPConfig
  @discardableResult
  @objc final public func withAppearance(_ appearance: KLPeKYC_NFC.KLPAppearance) -> KLPeKYC_NFC.KLPConfig
  @discardableResult
  @objc final public func withNFCStep(nfcDatahandler: KLPeKYC_NFC.KLPConfig.NFCDataHandler? = nil) -> KLPeKYC_NFC.KLPConfig
  @discardableResult
  @objc final public func withFaceStep(livenessVersion: KLPeKYC_NFC.KLPFaceLivenessVersion = .passive, faceDataHandler: KLPeKYC_NFC.KLPConfig.FaceDataHandler? = nil) -> KLPeKYC_NFC.KLPConfig
  @discardableResult
  final public func withEventHandler(_ eventHandler: @escaping KLPeKYC_NFC.KLPConfig.EventHandler) -> KLPeKYC_NFC.KLPConfig
  @discardableResult
  @objc final public func withShowLoadingHandler(_ showLoadingHandler: KLPeKYC_NFC.KLPConfig.ShowLoadingHandler? = nil) -> KLPeKYC_NFC.KLPConfig
  @discardableResult
  @objc final public func withHideLoadingHandler(_ hideLoadingHandler: KLPeKYC_NFC.KLPConfig.HideLoadingHandler? = nil) -> KLPeKYC_NFC.KLPConfig
  @discardableResult
  @objc final public func withShowErrorAlertHandler(_ showErrorAlertHandler: KLPeKYC_NFC.KLPConfig.ShowErrorAlertHandler? = nil) -> KLPeKYC_NFC.KLPConfig
  @discardableResult
  @objc final public func build() throws -> KLPeKYC_NFC.KLPConfig
  @objc deinit
}
extension KLPeKYC_NFC.KLPConfig {
  public typealias NFCDataHandler = (_ jsonNfc: [Swift.String : Any], _ completion: @escaping (_ result: KLPeKYC_NFC.KLPConfig.Result) -> Swift.Void) -> Swift.Void
  public typealias FaceDataHandler = (_ faceData: Foundation.NSData, _ faceBase64String: Swift.String, _ variant: Swift.String, _ completion: @escaping (_ result: KLPeKYC_NFC.KLPConfig.Result) -> Swift.Void) -> Swift.Void
  public typealias EventHandler = (KLPeKYC_NFC.KLPConfig.Event) -> Swift.Void
  public typealias ShowLoadingHandler = ((UIKit.UIViewController) -> Swift.Void)
  public typealias HideLoadingHandler = () -> Swift.Void
  public typealias ShowErrorAlertHandler = (Swift.String, UIKit.UIViewController) -> Swift.Void
  public enum Event {
    case cancel
    case completeNFCStep
    case completeFaceStep
    case completeAllSteps(result: KLPeKYC_NFC.KLPResult?)
  }
  @objc public enum ResultType : Swift.Int {
    case success
    case failure
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public class Result : ObjectiveC.NSObject {
    @objc public init(type: KLPeKYC_NFC.KLPConfig.ResultType, errorDescription: Swift.String? = nil)
    @objc deinit
  }
}
extension UIKit.UIImage {
  convenience public init?(klpNamed: Swift.String)
}
extension UIKit.UIColor {
  convenience public init(klpHexString: Swift.String)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func klp_constraint(other view: UIKit.UIView, edge: UIKit.UIEdgeInsets, isUsingSafeAreaLayoutGuide: Swift.Bool = false)
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public static func klp_current() -> UIKit.UIViewController
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public func klp_addDoneToolBar(title: Swift.String? = nil, font: UIKit.UIFont = .systemFont(ofSize: 16, weight: .medium), action: (() -> Swift.Void)? = nil)
}
extension UIKit.UITextView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func klp_addDoneToolBar(title: Swift.String? = nil, font: UIKit.UIFont = .systemFont(ofSize: 16, weight: .medium), action: (() -> Swift.Void)? = nil)
}
extension Swift.Dictionary {
  public func klp_toJSONString(options opt: Foundation.JSONSerialization.WritingOptions = [.prettyPrinted]) -> Swift.String
  @inlinable internal mutating func klp_append(_ other: [Key : Value]) {
        return self.merge(other, uniquingKeysWith: { $1 }) // replacing current value
    }
  @inlinable internal func klp_appending(_ other: [Key : Value]) -> [Key : Value] {
        return self.merging(other, uniquingKeysWith: { $1 }) // replacing current value
    }
  public func klp_getStringForKey(key: Swift.String) -> Swift.String
  public func klp_getIntForKey(key: Swift.String, defaultIfNil: Swift.Int = 0) -> Swift.Int
  public func klp_getBoolForKey(key: Swift.String) -> Swift.Bool
}
extension Swift.Array {
  @inlinable internal init(klp_reserveCapacity: Swift.Int) {
        self = Array<Element>()
        self.reserveCapacity(klp_reserveCapacity)
    }
}
@objc public class KLPResult : ObjectiveC.NSObject {
  @objc public var rawJson: [Swift.String : Any]
  @objc public var ocrData: KLPeKYC_NFC.KLPResult.OCRDataModel?
  @objc public var nfcData: KLPeKYC_NFC.KLPResult.NfcDataModel?
  @objc public init(rawJson: [Swift.String : Any], ocrData: KLPeKYC_NFC.KLPResult.OCRDataModel? = nil, nfcData: KLPeKYC_NFC.KLPResult.NfcDataModel? = nil)
  @objc deinit
}
extension KLPeKYC_NFC.KLPResult {
  @_inheritsConvenienceInitializers @objc public class OCRDataModel : ObjectiveC.NSObject {
    @objc public var field: KLPeKYC_NFC.KLPResult.OCRDataModel.Field
    @objc public var card_type: Swift.String?
    @objc override dynamic public init()
    @objc public init(fromDictionary: [Swift.String : Any])
    @objc deinit
  }
}
extension KLPeKYC_NFC.KLPResult.OCRDataModel {
  @_inheritsConvenienceInitializers @objc public class Field : ObjectiveC.NSObject {
    @objc public var birthday: Swift.String?
    @objc public var country: Swift.String?
    @objc public var doe: Swift.String?
    @objc public var doi: Swift.String?
    @objc public var ethnicity: Swift.String?
    @objc public var features: Swift.String?
    @objc public var gender: Swift.String?
    @objc public var home: Swift.String?
    @objc public var homeEntities: KLPeKYC_NFC.KLPResult.OCRDataModel.Field.HomeEntity?
    @objc public var idNumber: Swift.String?
    @objc public var name: Swift.String?
    @objc public var national: Swift.String?
    @objc public var poi: Swift.String?
    @objc public var religion: Swift.String?
    @objc public var resident: Swift.String?
    @objc public var residentEntities: KLPeKYC_NFC.KLPResult.OCRDataModel.Field.ResidentEntity?
    @objc public var type: Swift.String?
    @objc override dynamic public init()
    @objc public init(fromDictionary dictionary: [Swift.String : Any])
    public func toDictionary() -> [Swift.String : Any]
    @objc required public init(coder aDecoder: Foundation.NSCoder)
    @objc public func encode(with aCoder: Foundation.NSCoder)
    @objc deinit
  }
}
extension KLPeKYC_NFC.KLPResult.OCRDataModel.Field {
  @_inheritsConvenienceInitializers @objc public class ResidentEntity : ObjectiveC.NSObject {
    @objc public var district: Swift.String?
    @objc public var province: Swift.String?
    @objc public var unknown: Swift.String?
    @objc public var ward: Swift.String?
    @objc override dynamic public init()
    @objc public init(fromDictionary dictionary: [Swift.String : Any])
    @objc public func toDictionary() -> [Swift.String : Any]
    @objc required public init(coder aDecoder: Foundation.NSCoder)
    @objc public func encode(with aCoder: Foundation.NSCoder)
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class HomeEntity : ObjectiveC.NSObject {
    @objc public var district: Swift.String?
    @objc public var province: Swift.String?
    @objc public var unknown: Swift.String?
    @objc public var ward: Swift.String?
    @objc override dynamic public init()
    @objc public init(fromDictionary dictionary: [Swift.String : Any])
    @objc public func toDictionary() -> [Swift.String : Any]
    @objc required public init(coder aDecoder: Foundation.NSCoder)
    @objc public func encode(with aCoder: Foundation.NSCoder)
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KLPBaseViewController : UIKit.UIViewController {
  @objc deinit
  @_Concurrency.MainActor(unsafe) open var onNext: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onClose: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func setupUI()
  @objc @_Concurrency.MainActor(unsafe) open func closeTapped()
  @_Concurrency.MainActor(unsafe) open func hideHairline()
  @_Concurrency.MainActor(unsafe) open func showHairline()
  @_Concurrency.MainActor(unsafe) open func setColorNavigationBar(color: UIKit.UIColor? = nil)
  @_Concurrency.MainActor(unsafe) open func setUpPreventDismissingFeature()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension KLPeKYC_NFC.KLPBaseViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func presentationControllerDidAttemptToDismiss(_ presentationController: UIKit.UIPresentationController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func presentationControllerShouldDismiss(_ presentationController: UIKit.UIPresentationController) -> Swift.Bool
}
@objc public enum KLPFaceLivenessVersion : Swift.Int, Swift.CaseIterable, Swift.RawRepresentable {
  case passive
  case semiActive
  case active
  public typealias RawValue = Swift.String
  public init?(rawValue: KLPeKYC_NFC.KLPFaceLivenessVersion.RawValue)
  public var rawValue: KLPeKYC_NFC.KLPFaceLivenessVersion.RawValue {
    get
  }
  public var desc: Swift.String {
    get
  }
  public var key: Swift.String {
    get
  }
  public typealias AllCases = [KLPeKYC_NFC.KLPFaceLivenessVersion]
  public static var allCases: [KLPeKYC_NFC.KLPFaceLivenessVersion] {
    get
  }
}
@objc public enum KLPError : Swift.Int, Foundation.LocalizedError {
  case missingSDKToken
  case missingFlowStep
  case missingBaseUrl
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KLPAppearance : ObjectiveC.NSObject {
  @objc public static func builder() -> KLPeKYC_NFC.KLPAppearance
  @objc final public func withLanguage(_ language: Swift.String = "vi") -> KLPeKYC_NFC.KLPAppearance
  @objc final public func withMainColor(_ mainColor: Swift.String = "3270EA") -> KLPeKYC_NFC.KLPAppearance
  @objc final public func withMainTextColor(_ mainTextColor: Swift.String = "000000") -> KLPeKYC_NFC.KLPAppearance
  @objc final public func withBtnTextColor(_ btnTextColor: Swift.String = "ffffff") -> KLPeKYC_NFC.KLPAppearance
  @objc final public func withBackgroundColor(_ backgroundColor: Swift.String = "ffffff") -> KLPeKYC_NFC.KLPAppearance
  @objc final public func withIsAnimatedButton(_ isAnimatedButton: Swift.Bool = true) -> KLPeKYC_NFC.KLPAppearance
  @objc final public func withCornerRadiusButton(_ cornerRadiusButton: CoreFoundation.CGFloat = 10) -> KLPeKYC_NFC.KLPAppearance
  @objc final public func build() -> KLPeKYC_NFC.KLPAppearance
  @objc deinit
}
extension Foundation.Bundle {
  public static let KLPeKYC_NFC: Foundation.Bundle
}
@objc public enum KLPAlertType : Swift.Int, Swift.RawRepresentable {
  case error, close, other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension KLPeKYC_NFC.KLPResult {
  @_inheritsConvenienceInitializers @objc public class NfcDataModel : ObjectiveC.NSObject, Swift.Codable {
    @objc public var id_number: Swift.String?
    @objc public var name: Swift.String?
    @objc public var nationality: Swift.String?
    @objc public var date_of_issuance: Swift.String?
    @objc public var father_name: Swift.String?
    @objc public var personal_identification: Swift.String?
    @objc public var date_of_expiry: Swift.String?
    @objc public var old_id_number: Swift.String?
    @objc public var nation: Swift.String?
    @objc public var religion: Swift.String?
    @objc public var address: Swift.String?
    @objc public var face_image: Swift.String?
    @objc public var hometown: Swift.String?
    @objc public var mother_name: Swift.String?
    @objc public var mrz: Swift.String?
    @objc public var date_of_birth: Swift.String?
    @objc public var spouse_name: Swift.String?
    @objc public var gender: Swift.String?
    @objc public var faceImageBase64: Swift.String? {
      @objc get
    }
    @objc override dynamic public init()
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
public protocol KLPViewSetup {
  func setup()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KalapaBaseNibView : UIKit.UIView, KLPeKYC_NFC.KLPViewSetup {
  @_Concurrency.MainActor(unsafe) open var bundle: Foundation.Bundle? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func setup()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KalapaBaseWithoutNibView : UIKit.UIView, KLPeKYC_NFC.KLPViewSetup {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setup()
  @objc deinit
}
extension KLPeKYC_NFC.KLPConfig.ResultType : Swift.Equatable {}
extension KLPeKYC_NFC.KLPConfig.ResultType : Swift.Hashable {}
extension KLPeKYC_NFC.KLPConfig.ResultType : Swift.RawRepresentable {}
extension KLPeKYC_NFC.KLPFaceLivenessVersion : Swift.Equatable {}
extension KLPeKYC_NFC.KLPFaceLivenessVersion : Swift.Hashable {}
extension KLPeKYC_NFC.KLPError : Swift.Equatable {}
extension KLPeKYC_NFC.KLPError : Swift.Hashable {}
extension KLPeKYC_NFC.KLPError : Swift.RawRepresentable {}
extension KLPeKYC_NFC.KLPAlertType : Swift.Equatable {}
extension KLPeKYC_NFC.KLPAlertType : Swift.Hashable {}
