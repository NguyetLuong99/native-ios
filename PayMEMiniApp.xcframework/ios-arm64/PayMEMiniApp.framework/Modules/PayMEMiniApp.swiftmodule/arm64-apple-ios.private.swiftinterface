// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PayMEMiniApp
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import ContactsUI
import CoreImage
import Foundation
import GCDWebServer
import LocalAuthentication
import Lottie
import NSLogger
@_exported import PayMEMiniApp
import Photos
import Swift
import SwiftyJSON
import UIKit
import Vision
import WebKit
import ZIPFoundation
import _Concurrency
import _StringProcessing
public enum PayMEError {
  case miniApp(PayMEMiniApp.MiniAppError)
  case userCancel
  public var code: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PayME : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var oneSignalDelegate: PayMEMiniApp.PayMEOneSignalDelegate?
  @_Concurrency.MainActor(unsafe) public var delegate: PayMEMiniApp.PayMEDelegate?
  @_Concurrency.MainActor(unsafe) final public let combine: PayMEMiniApp.PayMECombine
  @_Concurrency.MainActor(unsafe) public init(key: PayMEMiniApp.PayMEKey)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func open(with openData: PayMEMiniApp.PayMEOpeningParam, from currentVC: UIKit.UIViewController? = nil)
  @objc deinit
}
public enum Environment : Swift.String {
  case local
  case dev
  case sbx
  case prod
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class PayMEConfig {
  public static let instance: PayMEMiniApp.PayMEConfig
  public var theme: PayMEMiniApp.Theme
  public var env: PayMEMiniApp.Environment
  public var isLogging: Swift.Bool
  @objc deinit
}
public protocol PayMEDelegate {
  func onError(action: PayMEMiniApp.PayMEAction, error: PayMEMiniApp.PayMEError)
  func onResponse(action: PayMEMiniApp.PayMEAction, response: Swift.Dictionary<Swift.String, Swift.String>)
}
public protocol PayMEOneSignalDelegate {
  func onSendTags(data: [Swift.String : Swift.String])
  func onDeleteTags(data: [Swift.String])
}
public struct MiniAppError {
}
@_hasMissingDesignatedInitializers public class BiometricAuthenication {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Console {
  @objc deinit
}
public enum PayMEAction {
  case PayME
  case Open
  case Pay
  public var value: Swift.String {
    get
  }
  public static func == (a: PayMEMiniApp.PayMEAction, b: PayMEMiniApp.PayMEAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PayMEKey {
  public init(appId: Swift.String, publicKey: Swift.String, privateKey: Swift.String)
}
public struct PayMEPaymentParam {
  public init(amount: Swift.Int, transactionId: Swift.String, note: Swift.String? = nil, ipnUrl: Swift.String? = nil)
}
public struct PayMEOpeningParam {
  public init(action: PayMEMiniApp.PayMEAction, phone: Swift.String, data: Any? = nil)
}
public class Theme {
  public var primary: UIKit.UIColor
  public var background: UIKit.UIColor
  public var textPrimary: UIKit.UIColor
  public init(primary: UIKit.UIColor, background: UIKit.UIColor, textPrimary: UIKit.UIColor)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PayMECombine {
  final public let notificationSubject: Combine.CurrentValueSubject<SwiftyJSON.JSON?, Swift.Never>
  @objc deinit
}
extension PayMEMiniApp.Environment : Swift.Equatable {}
extension PayMEMiniApp.Environment : Swift.Hashable {}
extension PayMEMiniApp.Environment : Swift.RawRepresentable {}
extension PayMEMiniApp.PayMEAction : Swift.Equatable {}
extension PayMEMiniApp.PayMEAction : Swift.Hashable {}
